
words.txt
So call a big meeting [5] 5Get everyone out out [4] 4.5Make every Who holler [4] 4Make every Who shout shout [5] 4.5
words_2.txt
Another common problem is the Running Median - which keeps track of the median for a [16] 5stream of numbers, updating the median for each new number. The second part of the coding [16] 5.0challenge is to implement a running median for the number of words per line of text. Consider [17] 5each line in a text file as a new stream of words, and find the median number of words per [20] 10.5line, up to that point (i.e. the median for that line and all the previous lines). For example, the [19] 16first line of the passage : [6] 11.0 [0] 6So call a big meeting [5] 5.5Get everyone out out [4] 5Make every Who holler [4] 5.0Make every Who shout shout [5] 5 [0] 5.0has 5 words so the running median for the first line is simply 5. Since the second line has 4 [20] 5words, the running median for the first two lines is the median of {4, 5} = 4.5 (since the median [20] 5.0of an even set of numbers is defined as the mean of the middle two elements after sorting) [18] 5After three lines, the running median would be the median of {4, 4, 5} = 4, and after all four [20] 5.5lines the running median is the median of {4, 4, 5, 5} = 4.5. Thus, the correct output for the [20] 6running median program for the above passage is: [8] 7.0 [0] 65.0 [1] 5.54.5 [1] 54.0 [1] 5.04.5 [1] 5 [0] 5.0We'd like you to implement your own version of this running median that calculates the [15] 5median number of words per line, for each line of the text files in the​ ​wc_input​ directory. If [18] 5.0there are multiple files in that directory, the files should be combined into a single stream and [17] 5processed by your running median program in alphabetical order, so a file named​ ​hello.txt [14] 5.5should be processed before a file named​ ​world.txt​.​ The resulting running median for each [14] 6line should then be outputted to a text file named​ ​med_result.txt​ in the ​wc_output [14] 7.0directory [1] 6 [0] 5.5You may write your solution in any one of the following programming languages: C, C++ [15] 6Clojure, Java, Python, Ruby, or Scala - then submit a link to a public Github repo with your [18] 7.0source code. In addition to the source code, the top-most directory of your repo must include [16] 8wc_input​ and ​wc_output​ directories, and a shell script named ​run.sh​ that compiles and [13] 10.5runs the Word Count and Running Median programs. If your solution requires additional [13] 133 / 4libraries or dependencies, the shell script should load them first so that your programs can be [18] 13.0run on any system just by running​ ​run.sh​ [8] 13 [0] 10.5As a data engineer, it’s important that you write clean, well-documented code that scales for [15] 13large amounts of data. For this reason, it’s important to ensure that your solution works well [16] 13.0for small and large text files, rather than just the simple examples above [13] 13